# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/ruby:2.7.0-buster-node-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "requirements.txt" }}
      - run:
          name: 🏗️ Install the Python Dependencies 🐍
          command: |
            sudo apt update
            sudo apt-get install aspell python3-pip
            python3 --version
            pip3 --version
            sudo pip3 install --upgrade virtualenv --progress-bar off
            python3 -m venv venv || virtualenv venv && . venv/bin/activate
            sudo pip3 install -r requirements.txt
      - save_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "requirements.txt" }}
          paths:
            - venv
      - run:
          name: 🧹 Run Markdown Spell Check
          command: |
            sh ./check-spelling.sh || exit 1
      - run:
          name: 🧹 Run YAML lint
          command: |
            yamllint .erb-lint.yml .hound.yml .overcommit.yml .percy.yml .reek.yml .rubocop.yml .travis.yml .circleci/config.yml .github/labeler.yml .github/workflows/greetings.yml .github/workflows/label.yml
      - run:
          name: 🧹 Run Pylint
          command: |
            find . -name "*.py" -not -path "**/venv/*" | xargs pylint --disable=C0103,C0114
      - run:
          name: 🧹 Run Flake8
          command: |
            flake8 --ignore=E501 --exclude=venv
      - run:
          name: 🏗️ Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache: # special step to restore the dependency cache
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependency-cache-
      - run:
          name: 🏗️ Install
          command: npm install
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: 🧪 npm test
          command: npm test
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: 🏗️ Install Ruby Dependencies 💎
          command: |
            gem install bundler
            bundle update --bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      - run:
          name: 🧹 Run Rubocop
          command: |
            bundle exec rubocop
      - run:
          name: 🧹 Run Markdown lint
          command: |
            bundle exec mdl .
      - run:
          name: 🧹 Run Reek
          command: |
            bundle exec reek -c .reek.yml
      - run:
          name: 📷 Run Percy snapshots
          command: |
            cd docs
            bundle exec jekyll build
            npx percy snapshot _site/ --ignore-files "assets/python/**,parallel-universe/index.html"

  surge:
    docker:
      - image: circleci/python:3.8.2-buster-node-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: 🏗️ Install Surge
          command: |
            npm install surge
      - run:
          name: ✉️ Surge Deployment
          command: |
            ./node_modules/surge/lib/cli.js --project ./govegas --domain govegas.surge.sh

  shellcheck:
    docker:
      - image: nlknguyen/alpine-shellcheck:v0.4.6
    steps:
      - checkout
      - run:
          name: 🧹 Lint shell scripts
          command: |
            find . -type f -name '*.sh' | wc -l
            find . -type f -name '*.sh' | xargs shellcheck --external-sources

  go-lint:
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.13.3 #
    # directory where steps are run. Path must conform to the Go Workspace requirements
    working_directory: /go/src/github.com/fuchsia-programming/fuchsia
    steps:
      - checkout
      - restore_cache: # restores saved cache if no changes are detected since last run
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-pkg-cache
      - run: go get -u github.com/mgechev/revive
      - run:
          name: 🧹 Run Golang revive lint
          command: |
            sh ./check-revive.sh || exit 1
      - run:
          name: 🧪 Run Go test
          command: |
            go test -race -covermode atomic -coverprofile=profile.cov ./...
      - save_cache: # Store cache in the /go/pkg directory
          key: v1-pkg-cache
          paths:
            - "/go/pkg"

  shell:
    docker:
      - image: circleci/python:3.8.2-buster-node-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: 🐚 Print quotes from Brainyquote using shell
          command: |
            cd scrapers/shell
            sh ./brainyquote.sh tennis balls
      - run:
          name: 🐚 Print the maximum number of contributions in the last year from a users GitHub profile using sed
          command: |
            cd scrapers/shell
            sh ./github-max-per-day-sed.sh fabpot
      - run:
          name: 🐚 Print the maximum number of contributions in the last year from a users GitHub profile using pcregrep
          command: |
            cd scrapers/shell
            sh ./github-max-per-day-pcregrep.sh fabpot
      - run:
          name: 🐚 Print the maximum number of contributions in the last year from a users GitHub profile using perl
          command: |
            cd scrapers/shell
            sh ./github-max-per-day-perl.sh fabpot
      - run:
          name: 🐚 Print the maximum number of contributions in the last year from a users GitHub profile using awk
          command: |
            cd scrapers/shell
            sh ./github-max-per-day-awk.sh fabpot

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - shellcheck
      - go-lint
      - shell:
          requires:
            - build
            - shellcheck
            - go-lint
      - surge:
          requires:
            - build
          filters:
            branches:
              only: master
